import unittest
from io import StringIO
from datetime import datetime
from unittest.mock import patch
from members import checkInput, Members, createMember
from providers import findProvider, createProvider, Provider
from services import *

class memberFunctions(unittest.TestCase):
    def test_checkInput(self):
        result = checkInput("Jack", "9714701489", "1122 HOHO", "Portland", "OR", "97034")
        self.assertEqual(result, True)

    def test_checkInput_name_ValueError(self):
        with self.assertRaises(ValueError):
            checkInput("1234", "9714701489", "1122 HOHO", "Portland", "OR", "97034")

    def test_checkInput_phone_ValueError(self):
        with self.assertRaises(ValueError):
            checkInput("jack", "971kijik", "1122 HOHO", "Portland", "OR", "97034")
    
    def test_checkInput_state_ValueError_1(self):
        with self.assertRaises(ValueError):
            checkInput("jack", "9714701489", "1122 HOHO", "Portland", "ORG", "97034")

    def test_checkInput_state_ValueError_2(self):
        with self.assertRaises(ValueError):
            checkInput("jack", "9714701489", "1122 HOHO", "Portland", "11", "97034")

    def test_checkInput_zip_ValueError_1(self):
        with self.assertRaises(ValueError):
            checkInput("jack", "9714701489", "1122 HOHO", "Portland", "11", "lolo")

    def test_checkInput_zip_ValueError_2(self):
        with self.assertRaises(ValueError):
            checkInput("jack", "9714701489", "1122 HOHO", "Portland", "11", "9070342")


    def test_createMember(self):
        mem = ["Jack", "123456789", "1234 Holo", "Portland", "OR", "97201"]
        with patch('builtins.input', side_effect=mem):
            temp = createMember()
        self.assertEqual(len(temp), 6)

    def test_createMember_toLower(self):
        mem = ["Jack", "123456789", "1234 Holo", "Portland", "OR", "97201"]
        exceptOp = ["jack", "123456789", "1234 holo", "portland", "or", "97201"]
        with patch('builtins.input', side_effect=mem):
            temp = createMember()
        self.assertEqual(temp, exceptOp)

    def test_member_class(self):
        mem = Members("Test1", "1112223333", "1234 Holo", "Portland", "OR", "97201")
        self.assertTrue(type(mem) is Members)


class providerTesting(unittest.TestCase):

    def test_findProvider(self):
        result = findProvider("123456789")
        self.assertTrue(type(result) is str)

    def test_createProvider(self):
        pro = ["Test", "5031112222", "Internal"]
        with patch('builtins.input', side_effect=pro):
            temp = createProvider()
        self.assertEqual(len(temp), 3)

    def test_createProvider_toLower(self):
        pro = ["Test", "5031112222", "Internal"]
        expectOp = ["test", "5031112222", "internal"]
        with patch('builtins.input', side_effect=pro):
            temp = createProvider()
        self.assertEqual(temp, expectOp)

    def test_provider_class(self):
        temp = Provider("test one", "5031112222", "brain")
        self.assertTrue(type(temp) is Provider)


class serviceTesting(unittest.TestCase):
    def test_getReport(self):
        with patch('builtins.print', new_callable=StringIO):
            getreport("00", "00")
        assert self.getvalue() == "This is for unittest\n"



if __name__ == "__main__":
    unittest.main()
